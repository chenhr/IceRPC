// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `invoke.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package InfoInterface;

public class MntPair implements java.lang.Cloneable, java.io.Serializable
{
    public long src;

    public long dst;

    public int speed;

    public MntPair()
    {
    }

    public MntPair(long src, long dst, int speed)
    {
        this.src = src;
        this.dst = dst;
        this.speed = speed;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MntPair _r = null;
        if(rhs instanceof MntPair)
        {
            _r = (MntPair)rhs;
        }

        if(_r != null)
        {
            if(src != _r.src)
            {
                return false;
            }
            if(dst != _r.dst)
            {
                return false;
            }
            if(speed != _r.speed)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::InfoInterface::MntPair");
        __h = IceInternal.HashUtil.hashAdd(__h, src);
        __h = IceInternal.HashUtil.hashAdd(__h, dst);
        __h = IceInternal.HashUtil.hashAdd(__h, speed);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(src);
        __os.writeLong(dst);
        __os.writeInt(speed);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        src = __is.readLong();
        dst = __is.readLong();
        speed = __is.readInt();
    }

    public static final long serialVersionUID = -1037592036L;
}
